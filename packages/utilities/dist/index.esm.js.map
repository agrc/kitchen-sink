{"version":3,"file":"index.esm.js","sources":["../src/WebAPI.js","../src/url.js"],"sourcesContent":["export default {};\n\n// define([\n//     'dojo/Deferred',\n//     'dojo/request',\n//     'dojo/request/script',\n//     'dojo/_base/declare',\n//     'dojo/_base/lang'\n// ], function (\n//     Deferred,\n//     xhr,\n//     script,\n//     declare,\n//     lang\n// ) {\n//     return declare(null, {\n//         // description:\n//         //      A convenience class for using [AGRC's web api](http://api.mapserv.utah.gov).\n\n//         // baseUrl: String\n//         baseUrl: '//api.mapserv.utah.gov/api/v1/',\n\n//         // defaultAttributeStyle: String\n//         defaultAttributeStyle: 'identical',\n\n//         // xhrProvider: dojo/request/* provider\n//         //      The current provider as determined by the search function\n//         xhrProvider: null,\n\n//         // Properties to be sent into constructor\n\n//         // apiKey: String\n//         //      web api key (http://developer.mapserv.utah.gov/AccountAccess)\n//         apiKey: null,\n\n//         constructor: function (params) {\n//             // summary:\n//             //      description\n//             // params: {}\n//             console.log('agrc/modules/WebAPI:constructor', arguments);\n\n//             lang.mixin(this, params);\n//         },\n//         search: function (featureClass, returnValues, options) {\n//             // summary:\n//             //      search service wrapper (http://api.mapserv.utah.gov/#search)\n//             // featureClass: String\n//             //      Fully qualified feature class name eg: SGID10.Boundaries.Counties\n//             // returnValues: String[]\n//             //      A list of attributes to return eg: ['NAME', 'FIPS'].\n//             //      To include the geometry use the shape@ token or if you want the\n//             //      envelope use the shape@envelope token.\n//             // options.predicate: String\n//             //      Search criteria for finding specific features in featureClass.\n//             //      Any valid ArcObjects where clause will work. If omitted, a TSQL *\n//             //      will be used instead. eg: NAME LIKE 'K%'\n//             // options.geometry: String (not fully implemented)\n//             //      The point geometry used for spatial queries. Points are denoted as\n//             //      'point:[x,y]'.\n//             // options.spatialReference: Number\n//             //      The spatial reference of the input geographic coordinate pair.\n//             //      Choose any of the wkid's from the Geographic Coordinate System wkid reference\n//             //      or Projected Coordinate System wkid reference. 26912 is the default.\n//             // options.tolerance: Number (not implemented)\n//             // options.spatialRelation: String (default: 'intersect')\n//             // options.buffer: Number\n//             //      A distance in meters to buffer the input geometry.\n//             //      2000 meters is the maximum buffer.\n//             // options.pageSize: Number (not implemented)\n//             // options.skip: Number (not implemented)\n//             // options.attributeStyle: String (defaults to 'identical')\n//             //      Controls the casing of the attributes that are returned.\n//             //      Options:\n//             //\n//             //      'identical': as is in data.\n//             //      'upper': upper cases all attribute names.\n//             //      'lower': lowercases all attribute names.\n//             //      'camel': camel cases all attribute names\n//             //\n//             // returns: Promise\n//             console.log('agrc/modules/WebAPI:search', arguments);\n\n//             var url = this.baseUrl + 'search/' + featureClass + '/' + encodeURIComponent(returnValues.join(','));\n\n//             if (!options) {\n//                 options = {};\n//             }\n//             options.apiKey = this.apiKey;\n//             if (!options.attributeStyle) {\n//                 options.attributeStyle = this.defaultAttributeStyle;\n//             }\n\n//             return this._buildRequest(url, options, 'Error with search request');\n//         },\n//         geocode: function (street, zone, options) {\n//             // summary:\n//             //      geocode service wrapper (http://api.mapserv.utah.gov/#geocoding)\n//             // street: String\n//             //      A Utah street address. eg: 326 east south temple st. Intersections are separated by and.\n//             // zone: String\n//             //      A Utah municipality name or 5 digit zip code.\n//             // options.spatialReference: Number\n//             //      The spatial reference of the input geographic coordinate pair.\n//             //      Defaults to 26912.\n//             // options.format: String (esrijson | geojson)\n//             //      The format of the resulting address. esri json will easily parse into an esri.Graphic\n//             //      for display on a map and geojson will easily parse into a feature for use in many open\n//             //      source projects. If this value is omitted, normal json will be returned.\n//             // returns: Promise\n//             console.log('agrc/modules/WebAPI:geocode', arguments);\n\n//             var url = this.baseUrl + 'geocode/' + street + '/' + zone;\n\n//             if (!options) {\n//                 options = {};\n//             }\n//             options.apiKey = this.apiKey;\n\n//             return this._buildRequest(url, options, 'Error with geocode request');\n//         },\n//         reverseGeocode: function (x, y, options) {\n//             // summary:\n//             //      reverse geocode service wrapper (http://api.mapserv.utah.gov/#geocoding)\n//             // x: Number\n//             //      An x coordinate.\n//             // y: Number\n//             //      A y coordinate.\n//             // options.spatialReference: Number\n//             //      The spatial reference of the input geographic coordinate pair.\n//             //      Defaults to 26912.\n//             // options.distance: Number\n//             //      Sets the distance in meters from the geographic coordinate to find a street address.\n//             //      Default is 5 meters.\n//             // returns: Promise\n//             console.log('agrc/modules/WebAPI:reverseGeocode', arguments);\n\n//             var url = this.baseUrl + 'geocode/reverse/' + x + '/' + y;\n\n//             if (!options) {\n//                 options = {};\n//             }\n//             options.apiKey = this.apiKey;\n\n//             return this._buildRequest(url, options, 'Error with reverse geocode request');\n//         },\n//         getRouteMilepost: function (route, milepost, options) {\n//             // summary:\n//             //      route milepost wrapper (http://api.mapserv.utah.gov/#geocoding)\n//             // route: String\n//             //      The Utah highway number. eg: 15.\n//             // milepost: String\n//             //      The highway milepost. eg: 309.001. Milepost precision is up to\n//             //      1/1000 of a mile (approximately 5 feet).\n//             // options.side: String (increasing | decreasing)\n//             //      For divided highways only.. The side of the divided highway to match. Increasing\n//             //      if you are on the positive side of the divided highway (The mileposts are\n//             //      getting larger as you drive). Decreasing if you are on the negative side of a\n//             //      divided highway (the mileposts are getting smaller as you drive). Default is Increasing.\n//             // options.spatialReference: String\n//             //      The spatial reference of the input geographic coordinate pair. Choose any of the wkid's\n//             //      from the Geographic Coordinate System wkid reference or Projected Coordinate System\n//             //      wkid reference. 26912 is the default.\n//             // returns: Promise\n//             console.log('agrc/modules/WebAPI:getRouteMilepost', arguments);\n\n//             var url = this.baseUrl + 'geocode/milepost/' + route + '/' + milepost;\n\n//             if (!options) {\n//                 options = {};\n//             }\n//             options.apiKey = this.apiKey;\n\n//             return this._buildRequest(url, options, 'Error with route milepost request');\n//         },\n//         _buildRequest: function (url, options, rejectMessage) {\n//             console.log('agrc/modules/WebAPI:_buildRequest', arguments);\n\n//             var def = new Deferred();\n//             var params = {\n//                 query: options,\n//                 handleAs: 'json',\n//                 headers: {\n//                     // remove the pre-flight request which breaks the request\n//                     // ref: http://www.sitepen.com/blog/2014/01/15/faq-cors-with-dojo/\n//                     'X-Requested-With': null\n//                 },\n//                 // required for JSONP requests and doesn't hurt CORS requests\n//                 jsonp: 'callback'\n//             };\n\n//             if (!this.xhrProvider) {\n//                 this.xhrProvider = (this.supportsCORS()) ? xhr : script;\n//             }\n\n//             this.xhrProvider(url, params).then(function (response) {\n//                 if (response.status === 200) {\n//                     def.resolve(response.result);\n//                 } else {\n//                     def.reject(response.message);\n//                 }\n//             }, function (err) {\n//                 if (err.message) {\n//                     def.reject(err.message);\n//                 } else {\n//                     def.reject(rejectMessage);\n//                 }\n//             });\n\n//             return def.promise;\n//         },\n//         supportsCORS: function () {\n//             // summary:\n//             //      Tests for CORS support. Code is from Modernizer\n//             // returns: Boolean\n//             console.log('agrc/modules/WebAPI:supportsCORS', arguments);\n\n//             return 'XMLHttpRequest' in window && 'withCredentials' in new XMLHttpRequest();\n//         }\n//     });\n// });\n","export const toQueryString = (obj) => {\n  throw new Error();\n};\n// Object.keys(obj)\n//   .filter((key) => obj[key] !== null)\n//   .map((key) => encodeURIComponent(key) + '=' + encodeURIComponent(obj[key]))\n//   .join('&')\n//   .replace(/%20/g, '+');\n"],"names":[],"mappings":"AAAA,IAAA,SAAe;ACAH,MAAC,gBAAgB,CAAC,QAAQ;AACpC,QAAM,IAAI,MAAK;AACjB;;"}